---

# Generic implementation for calling template files tagged by app name
#
# when using templates, the module keeps erroring
# fatal: [localhost]: FAILED! => {"changed": false, "module_stderr": "/Users/ecalvo/.ansible/tmp/ansible-tmp-1563510299.840724-133614227725275/AnsiballZ_k8s.py:18: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n  import imp\nTraceback (most recent call last):\n  File \"/Users/ecalvo/.ansible/tmp/ansible-tmp-1563510299.840724-133614227725275/AnsiballZ_k8s.py\", line 114, in <module>\n    _ansiballz_main()\n  File \"/Users/ecalvo/.ansible/tmp/ansible-tmp-1563510299.840724-133614227725275/AnsiballZ_k8s.py\", line 106, in _ansiballz_main\n    invoke_module(zipped_mod, temp_path, ANSIBALLZ_PARAMS)\n  File \"/Users/ecalvo/.ansible/tmp/ansible-tmp-1563510299.840724-133614227725275/AnsiballZ_k8s.py\", line 49, in invoke_module\n    imp.load_module('__main__', mod, module, MOD_DESC)\n  File \"/usr/local/Cellar/python/3.7.2_2/Frameworks/Python.framework/Versions/3.7/lib/python3.7/imp.py\", line 234, in load_module\n    return load_source(name, filename, file)\n  File \"/usr/local/Cellar/python/3.7.2_2/Frameworks/Python.framework/Versions/3.7/lib/python3.7/imp.py\", line 169, in load_source\n    module = _exec(spec, sys.modules[name])\n  File \"<frozen importlib._bootstrap>\", line 630, in _exec\n  File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\n  File \"/var/folders/5s/jg0f9tf145n_yf2kr_hgg4c00000gn/T/ansible_k8s_payload_9w2kct1h/__main__.py\", line 258, in <module>\n  File \"/var/folders/5s/jg0f9tf145n_yf2kr_hgg4c00000gn/T/ansible_k8s_payload_9w2kct1h/__main__.py\", line 254, in main\n  File \"/var/folders/5s/jg0f9tf145n_yf2kr_hgg4c00000gn/T/ansible_k8s_payload_9w2kct1h/ansible_k8s_payload.zip/ansible/module_utils/k8s/raw.py\", line 158, in execute_module\nAttributeError: 'str' object has no attribute 'get'\n", "module_stdout": "", "msg": "MODULE FAILURE\nSee stdout/stderr for the exact error", "rc": 1}

- name: Getting a version without dots due to limitation in k8s
  set_fact:
      version_dashed: "{{ version  | regex_replace('\\.','-') }}"
      version_major:  "{{ version  | regex_replace('^(?P<major>.+)\\.(?P<minor>\\d+)$', '\\g<major>') }}"
      version_minor:  "{{ version  | regex_replace('^(?P<major>.+)\\.(?P<minor>\\d+)$', '\\g<minor>') }}"
      namespace: "pocoyoonk8s"
      role_path: "{{playbook_dir}}/roles/generic/"
  tags: [generic, '{{app}}']

# TODO: add secret for the password 

- name: Create a k8s namespace
  k8s:
    name: "{{ namespace }}"
    api_version: v1
    kind: Namespace
    state: "{{ansible_state}}"
  tags: [generic, '{{app}}']

- name: Check cm present
  stat:
    path: "{{role_path}}/templates/{{app}}-cm.j2" #"{{ lookup('template', '{{app}}-cm.j2') }}"
  register: cmstat
  tags: [generic, '{{app}}']

- name: Check call present
  stat:
    path:  "{{role_path}}/templates/{{app}}.j2"
  register: callstat
  tags: [generic, '{{app}}']

- name: Config Map creation
#   vars:
#     K8S_AUTH_API_KEY: '{{K8S_AUTH_API_KEY}}'
#     K8S_AUTH_HOST: '{{K8S_AUTH_HOST}}'  
  k8s_raw:
    api_version: v1
    state: "{{ansible_state}}"
    namespace: "{{namespace}}"
    definition: "{{ lookup('template', '{{app}}-cm.j2') | from_yaml  }}"
  tags: [generic, '{{app}}']
  when: cmstat.stat.exists == true

- name: Postgres deploy creation
  k8s_raw:
    api_version: v1
    state: "{{ansible_state}}"
    namespace: "{{namespace}}"
    definition: "{{ lookup('template', '{{app}}.j2') | from_yaml  }}" 
  tags: [generic, '{{app}}']
  when: callstat.stat.exists == true

- name: Get a list of all pods from any namespace
  k8s_facts:
    namespace: "{{namespace}}"
    api_version: v1
    kind: Pod
  register: pod_list
  tags: [generic, '{{app}}']


- name: Pod list
  debug:
    msg:
      - "{{DEBUG}}"
      - "{{pod_list}}"
  when: DEBUG == true