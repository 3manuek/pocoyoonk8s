---
# tasks file for postgresql

# - name: Config Map load into register
#   register:
#     cm: "{{ lookup('template', 'postgres-cm.j2') }}"

# - name: Payload into register
#   register:
#     payload: "{{ lookup('template', 'payload.j2') }}"

# - name: Create a k8s namespace
#   k8s:
#     name: {{ namespace }}
#     api_version: v1
#     kind: Namespace
#     state: present


# - name: Config Map creation
# #   vars:
# #     K8S_AUTH_API_KEY: '{{K8S_AUTH_API_KEY}}'
# #     K8S_AUTH_HOST: '{{K8S_AUTH_HOST}}'  
#   k8s:
#     api_version: v1
#     state: present
#     namespace: default
#     definition: "{{ lookup('template', 'postgres-cm.j2') | from_yaml_all  }}"
#   tags: [postgres]

# - name: Postgres deploy creation
#   k8s:
#     api_version: v1
#     state: present
#     namespace: default
#     definition: "{{ lookup('template', 'payload.j2') | from_yaml_all  }}" # | from_yaml_all
#   tags: [postgres]

# when using templates, the module keeps erroring
# fatal: [localhost]: FAILED! => {"changed": false, "module_stderr": "/Users/ecalvo/.ansible/tmp/ansible-tmp-1563510299.840724-133614227725275/AnsiballZ_k8s.py:18: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n  import imp\nTraceback (most recent call last):\n  File \"/Users/ecalvo/.ansible/tmp/ansible-tmp-1563510299.840724-133614227725275/AnsiballZ_k8s.py\", line 114, in <module>\n    _ansiballz_main()\n  File \"/Users/ecalvo/.ansible/tmp/ansible-tmp-1563510299.840724-133614227725275/AnsiballZ_k8s.py\", line 106, in _ansiballz_main\n    invoke_module(zipped_mod, temp_path, ANSIBALLZ_PARAMS)\n  File \"/Users/ecalvo/.ansible/tmp/ansible-tmp-1563510299.840724-133614227725275/AnsiballZ_k8s.py\", line 49, in invoke_module\n    imp.load_module('__main__', mod, module, MOD_DESC)\n  File \"/usr/local/Cellar/python/3.7.2_2/Frameworks/Python.framework/Versions/3.7/lib/python3.7/imp.py\", line 234, in load_module\n    return load_source(name, filename, file)\n  File \"/usr/local/Cellar/python/3.7.2_2/Frameworks/Python.framework/Versions/3.7/lib/python3.7/imp.py\", line 169, in load_source\n    module = _exec(spec, sys.modules[name])\n  File \"<frozen importlib._bootstrap>\", line 630, in _exec\n  File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\n  File \"/var/folders/5s/jg0f9tf145n_yf2kr_hgg4c00000gn/T/ansible_k8s_payload_9w2kct1h/__main__.py\", line 258, in <module>\n  File \"/var/folders/5s/jg0f9tf145n_yf2kr_hgg4c00000gn/T/ansible_k8s_payload_9w2kct1h/__main__.py\", line 254, in main\n  File \"/var/folders/5s/jg0f9tf145n_yf2kr_hgg4c00000gn/T/ansible_k8s_payload_9w2kct1h/ansible_k8s_payload.zip/ansible/module_utils/k8s/raw.py\", line 158, in execute_module\nAttributeError: 'str' object has no attribute 'get'\n", "module_stdout": "", "msg": "MODULE FAILURE\nSee stdout/stderr for the exact error", "rc": 1}

- name: Config Map integrated
  k8s:
    state: present
    namespace: default
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ app }}-config"
        labels:
          app: "{{ app }}"
      data:
        POSTGRES_DB: "{{ pg_database }}"
        POSTGRES_USER: "{{ pg_user }}"
        POSTGRES_PASSWORD: "{{ pg_pass }}"
        VERSION: "{{ version }}"
  tags: [postgres]        

# - name: Deployment integrated
#   k8s:
#     state: present
#     namespace: default
#     definition:
#         apiVersion: v1
#         kind: List
#         items:
#         - apiVersion: v1
#         kind: Service
#         metadata:
#             name: "{{ app }}{{ version }}-svc"
#             labels: 
#             app: "{{ app }}{{ version }}"
#         spec:
#             type: NodePort
#             ports:
#             - name: "{{ app }}"
#                 port: "{{ port }}"
#             selector: 
#             app: "{{ app }}{{ version }}"
#         - apiVersion: extensions/v1beta1
#         kind: Deployment
#         metadata:
#             name: "{{ app }}{{ version }}-dply"
#         spec:
#             template:
#             metadata:
#                 labels:
#                 app: "{{ app }}{{ version }}"
#             spec:
#                 containers:
#                 - name: "{{ app }}{{ version }}"
#                     image: "{{ app }}:{{ version }}"
#                     ports:
#                     - containerPort: "{{ port }}"
#                         name: "{{ app }}"
#                         protocol: TCP
#                     envFrom:
#                     - configMapRef:
#                         name: "{{ app }}-config"

